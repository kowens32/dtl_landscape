@Library('openshift-library') _

openshift.withCluster() {
  env.APP_NAME = "dtl-landscape"
  env.SBX_ENV = openshift.project()
  env.ARTIFACT_DIRECTORY = "dal-landscape/dist/"
  env.BUILD_ENV = "ea-build"
  env.DVL_ENV = "ea-dvl"
}

pipeline {

  agent { label 'nodejs12' }
  
  stages {

    stage('SCM Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Build') {
      steps {     
        withCredentials(
        [string(credentialsId: "${BUILD_ENV}-github-secret", variable: 'GITHUB_KEY'), 
        string(credentialsId: "${BUILD_ENV}-twitter-secret", variable: 'TWITTER_KEYS')]) {
            script {
                sh '''
                    echo "build landscapeapp NPM"
                    function y { PROJECT_PATH=`pwd` npm run --prefix ../landscapeapp "$@"; }
                    export -f y
                    cd landscapeapp
                    npm install
                    echo "Building Dynamic Data for updates to the processed_landscape.yml"
                    cd ../dal-landscape
                    echo "Starting build"
                    y build
                    echo "Copy NGINX Conf"
                    cd ..
                    cp config/nginx.conf ${ARTIFACT_DIRECTORY}
                  '''
            } // End Script
        } // with withCredentials
      } // End Steps
    }

    stage('Image Build') {
      steps {
        binaryBuild(projectName: "${BUILD_ENV}", buildConfigName: "${APP_NAME}", artifactsDirectoryName: "${ARTIFACT_DIRECTORY}")
      }
    }

    stage('Apply Deploy Configuration') {
      agent { label 'applier' }

      steps {
        applier(secretName: "pipeline-dvl",
                registryUrl: "https://dvl1con.paasdev.delta.com",
                inventoryPath: ".applier/inventory-dvl/",
                requirementsPath: ".applier/requirements.yml",
                skipTlsVerify: true )
      }
    }

    stage('Tag Image from Build to Deploy') {
        steps {
            tagImage(sourceImageName: "${APP_NAME}",
                     sourceImagePath: "${BUILD_ENV}",
                     sourceImageTag: "latest",
                     toImageName: "${APP_NAME}",
                     toImagePath: "${DVL_ENV}",
                     toImageTag: "latest")
        }
    }
    
    stage ("Verify Deployment to DPL") {
      steps {
          verifyDeployment(targetApp: "${APP_NAME}", projectName: "${DVL_ENV}")
      }
    }
  }
}